#!/usr/bin/env python3
"""
Test enhanced logging to verify full prompt and response content is logged
"""

import sys
import os

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from holistic_analysis_logger import HolisticAnalysisLogger

def test_enhanced_logging():
    """Test that full prompt and response content is logged"""
    print("=== Testing Enhanced Logging ===\n")
    
    # Create logger instance
    logger = HolisticAnalysisLogger()
    
    # Test data
    test_prompt = """
    B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh Vi·ªát Nam. H√£y ph√¢n t√≠ch b√†i vi·∫øt sau v√† tr√≠ch xu·∫•t th√¥ng tin v·ªÅ c√°c c·ªï phi·∫øu ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p:

    === B√ÄI VI·∫æT ===
    VIC Group v·ª´a c√¥ng b·ªë k·∫øt qu·∫£ kinh doanh qu√Ω 2/2025 v·ªõi doanh thu ƒë·∫°t 15,000 t·ª∑ ƒë·ªìng, tƒÉng 12% so v·ªõi c√πng k·ª≥ nƒÉm tr∆∞·ªõc. 
    L·ª£i nhu·∫≠n sau thu·∫ø ƒë·∫°t 2,500 t·ª∑ ƒë·ªìng, tƒÉng m·∫°nh 18% so v·ªõi c√πng k·ª≥.
    
    Trong khi ƒë√≥, HPG c≈©ng ghi nh·∫≠n k·∫øt qu·∫£ t√≠ch c·ª±c v·ªõi doanh thu 8,500 t·ª∑ ƒë·ªìng v√† l·ª£i nhu·∫≠n 1,200 t·ª∑ ƒë·ªìng.
    
    Ch·ªâ tr·∫£ l·ªùi theo format JSON:
    {
        "mentioned_stocks": [
            {
                "stock_symbol": "SYMBOL",
                "sentiment": "positive/negative/neutral", 
                "summary": "T√≥m t·∫Øt ph√¢n t√≠ch"
            }
        ],
        "post_summary": "T√≥m t·∫Øt b√†i vi·∫øt"
    }
    """
    
    test_response = {
        "mentioned_stocks": [
            {
                "stock_symbol": "VIC",
                "sentiment": "positive",
                "summary": "VIC Group c√≥ k·∫øt qu·∫£ kinh doanh t√≠ch c·ª±c Q2/2025 v·ªõi doanh thu tƒÉng 12% v√† l·ª£i nhu·∫≠n tƒÉng 18%"
            },
            {
                "stock_symbol": "HPG", 
                "sentiment": "positive",
                "summary": "HPG ghi nh·∫≠n k·∫øt qu·∫£ t√≠ch c·ª±c v·ªõi doanh thu 8,500 t·ª∑ v√† l·ª£i nhu·∫≠n 1,200 t·ª∑ ƒë·ªìng"
            }
        ],
        "post_summary": "B√°o c√°o k·∫øt qu·∫£ kinh doanh Q2/2025 c·ªßa VIC v√† HPG ƒë·ªÅu cho th·∫•y tƒÉng tr∆∞·ªüng t√≠ch c·ª±c"
    }
    
    # Test logging
    print("1. Testing Gemini call logging...")
    call_id = logger.log_gemini_call(
        call_type="company_analysis",
        prompt=test_prompt,
        post_urls=["https://example.com/test-post"]
    )
    print(f"‚úì Logged Gemini call #{call_id}")
    
    print("\n2. Testing Gemini response logging...")
    logger.log_gemini_response(
        call_type="company_analysis", 
        response=test_response,
        identifier="https://example.com/test-post"
    )
    print("‚úì Logged Gemini response")
    
    print("\n3. Finalizing logging session...")
    json_file = logger.finalize_session([])
    print(f"‚úì Session finalized. JSON log: {json_file}")
    
    # Verify the logs contain full content
    print("\n4. Verifying log content...")
    
    # Check log file
    log_file = logger.log_dir / f"analysis_{logger.analysis_session['session_id']}.log"
    if log_file.exists():
        with open(log_file, 'r', encoding='utf-8') as f:
            log_content = f.read()
        
        # Check if full prompt is in log
        if "VIC Group v·ª´a c√¥ng b·ªë k·∫øt qu·∫£" in log_content:
            print("‚úì Full prompt content found in log file")
        else:
            print("‚úó Full prompt content NOT found in log file")
            return False
            
        # Check if full response is in log (could be dict format or JSON format)
        if ("mentioned_stocks" in log_content and "VIC" in log_content) or ('"mentioned_stocks"' in log_content and '"stock_symbol": "VIC"' in log_content):
            print("‚úì Full response content found in log file")
        else:
            print("‚úó Full response content NOT found in log file")
            return False
    else:
        print("‚úó Log file not found")
        return False
    
    # Check JSON file
    if json_file.exists():
        import json
        with open(json_file, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        
        # Check if full prompt is in JSON
        gemini_calls = json_data.get('gemini_calls', [])
        if gemini_calls and 'prompt_full' in gemini_calls[0]:
            if "VIC Group v·ª´a c√¥ng b·ªë k·∫øt qu·∫£" in gemini_calls[0]['prompt_full']:
                print("‚úì Full prompt content found in JSON file")
            else:
                print("‚úó Full prompt content NOT found in JSON file")
                return False
        else:
            print("‚úó prompt_full field not found in JSON file")
            return False
            
        # Check if full response is in JSON (could be dict format or JSON format)
        if gemini_calls and 'response_full' in gemini_calls[0]:
            response_full = gemini_calls[0]['response_full']
            if ("'stock_symbol': 'VIC'" in response_full) or ('"stock_symbol": "VIC"' in response_full):
                print("‚úì Full response content found in JSON file")
            else:
                print("‚úó Full response content NOT found in JSON file")
                return False
        else:
            print("‚úó response_full field not found in JSON file")
            return False
    else:
        print("‚úó JSON file not found")
        return False
    
    print("\n‚úÖ All enhanced logging tests passed!")
    print(f"\nLog files created:")
    print(f"  - Text log: {log_file}")
    print(f"  - JSON log: {json_file}")
    
    return True

if __name__ == "__main__":
    try:
        success = test_enhanced_logging()
        if success:
            print("\nüéâ Enhanced logging is working correctly!")
            sys.exit(0)
        else:
            print("\n‚ùå Enhanced logging tests failed!")
            sys.exit(1)
    except Exception as e:
        print(f"\nüí• Test failed with exception: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)