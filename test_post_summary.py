#!/usr/bin/env python3
"""
Test script to verify post summary generation and database saving
"""
import asyncio
from main import analyze_individual_post_with_gemini

def test_post_summary_generation():
    """Test if Gemini generates proper post summaries"""
    print("🧪 Testing Post Summary Generation...\n")
    
    # Sample Vietnamese financial content
    test_content = """
    VPB công bố kết quả kinh doanh Q2/2025 với doanh thu đạt 2.912 tỷ đồng, tăng 21% so với cùng kỳ năm trước. 
    Lợi nhuận sau thuế đạt 190 tỷ đồng, tăng 18% so với cùng kỳ. 
    Ngân hàng VPB cho biết kết quả này nhờ vào việc tăng cường hoạt động cho vay và giảm chi phí hoạt động.
    """
    
    try:
        print("Testing Gemini analysis with sample content...")
        result = analyze_individual_post_with_gemini(test_content)
        
        print("✅ Analysis Result:")
        print(f"Post Summary: {result.get('post_summary', 'NOT FOUND')}")
        print(f"Stocks Found: {len(result.get('mentioned_stocks', []))}")
        
        for stock in result.get('mentioned_stocks', []):
            print(f"  - {stock.get('stock_symbol', 'N/A')}: {stock.get('sentiment', 'N/A')} - {stock.get('summary', 'N/A')}")
        
        # Check if summary is not empty
        summary = result.get('post_summary', '')
        if summary and summary.strip() and summary not in ['Analysis completed', 'Analysis failed', '']:
            print("\n🎉 SUCCESS: Post summary is being generated properly!")
            return True
        else:
            print(f"\n❌ ISSUE: Post summary is empty or generic: '{summary}'")
            return False
            
    except Exception as e:
        print(f"❌ Test failed: {e}")
        return False

async def test_database_insertion():
    """Test database insertion with summary"""
    print("\n🧪 Testing Database Insertion...\n")
    
    try:
        from database import db_service
        
        # Test post data
        post_data = {
            "url": "https://test-post-summary.com",
            "date": "02/08/2025",
            "content": "Test content for summary",
            "type": "Company"
        }
        
        # Test analysis data
        analysis_data = [
            {
                "stock_symbol": "TEST",
                "sentiment": "positive",
                "summary": "Test stock mention"
            }
        ]
        
        # Test summary
        test_summary = "This is a test summary generated by Gemini for database insertion testing."
        
        # Get test source (should exist from previous tests)
        sources = await db_service.get_all_sources()
        if sources:
            source_id = sources[0]["id"]
            print(f"Using test source: {sources[0]['name']}")
            
            # Test the save function
            post_id = await db_service.save_post_with_analysis(
                post_data, source_id, analysis_data, test_summary
            )
            
            print(f"✅ SUCCESS: Post saved with ID: {post_id}")
            print(f"Summary should be: '{test_summary}'")
            
            return True
        else:
            print("❌ No sources found in database for testing")
            return False
            
    except Exception as e:
        print(f"❌ Database test failed: {e}")
        return False

async def main():
    print("🚀 Testing Post Summary Fix...\n")
    
    # Test 1: Gemini summary generation
    gemini_ok = test_post_summary_generation()
    
    # Test 2: Database insertion
    db_ok = await test_database_insertion()
    
    if gemini_ok and db_ok:
        print("\n🎉 ALL TESTS PASSED!")
        print("Post summaries should now be properly saved to the database.")
        print("\nNext steps:")
        print("1. Clean your posts table: DELETE FROM posts;")
        print("2. Run a fresh crawl to test the fix")
        print("3. Check posts.summary field in database")
    else:
        print("\n⚠️  Some tests failed. Check the errors above.")

if __name__ == "__main__":
    asyncio.run(main())